# -*- coding: utf-8 -*-
"""번호판_인식

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fK9N2dQzOzeS4jEKde9oCwPJeEIsoBgu
"""
# 1. 코랩에서 드라이브 열기기 
from google.colab import drive
drive.mount('/content/drive')

# 2. 필요한 라이브러리,YOLOv5 리포지토리 클론
!git clone https://github.com/ultralytics/yolov5  # YOLOv5 리포지토리 클론
# %cd yolov5
!pip install -r requirements.txt  # 필요한 라이브러리 설치


# 3. 데이터셋 경로 설정
!cp -r /content/drive/MyDrive/dataset

# 4. 야말 파일 설정정
data_yaml = """
train: /content/drive/MyDrive/dataset/images/train
val: /content/drive/MyDrive/dataset/images/val/

nc: 3  # 클래스 수
names: ['7character', '8character', '8character_film']  # 클래스 이름
"""

with open('/content/yolov5/data.yaml', 'w') as f:
    f.write(data_yaml)


# 5. 모델 학습
!python train.py --img 640 --batch 16 --epochs 100 --data /content/yolov5/data.yaml --weights yolov5s.pt

# 6. 학습된 모델 결과 확인
!ls runs/train/

# 7. 테스트 평가
!python detect.py --weights runs/train/exp/weights/best.pt --img 640 --conf 0.25 --source /content/drive/MyDrive/dataset/images/test/

# 8. 테스트 한 내용 폴더로 저장장
!zip -r /content/detection_results.zip /content/yolov5/runs/train/exp


# 9. 문자추출을 위해 tesseract-ocr
!apt-get install tesseract-ocr
!pip install pytesseract

# 10. 한글 언어 데이터 설치
!apt-get install tesseract-ocr-kor

# 11. 사진에서 문자 추출출
import torch
import cv2
import pytesseract
import matplotlib.pyplot as plt
from google.colab.patches import cv2_imshow  # Colab 환경에서 OpenCV 이미지를 표시하기 위한 패치

# 학습된 YOLOv5 모델 로드 (학습된 가중치 경로를 업데이트하세요)
model = torch.hub.load('ultralytics/yolov5', 'custom', path='/content/drive/MyDrive/yolov5_results/weights/best.pt', force_reload=True)

# 번호판 이미지 전처리 함수
def preprocess_plate(plate_img):
    # 그레이스케일로 변환
    gray = cv2.cvtColor(plate_img, cv2.COLOR_BGR2GRAY)

    # 이진화 (Thresholding)
    _, binary = cv2.threshold(gray, 150, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)

    # 노이즈 제거 (이미지 블러링)
    processed_img = cv2.GaussianBlur(binary, (5, 5), 0)

    return processed_img

# 번호판 영역 감지 후 전처리 및 글자 추출 함수
def detect_and_extract_license_plate_text(image_path):
    # 이미지 로드
    img = cv2.imread(image_path)

    # 이미지 로드 확인
    if img is None:
        print("이미지를 로드할 수 없습니다. 경로를 확인해주세요.")
        return None  # None 반환

    # YOLOv5로 추론 수행
    results = model(img)

    # 감지된 번호판 영역에서 전처리 및 글자 추출
    extracted_text = ""  # 텍스트를 저장할 변수를 초기화
    for *box, conf, cls in results.xyxy[0]:
        x1, y1, x2, y2 = map(int, box)  # 바운딩 박스 좌표
        print(f"바운딩 박스 좌표: x1={x1}, y1={y1}, x2={x2}, y2={y2}")

        # 번호판 영역 추출
        plate_img = img[y1:y2, x1:x2]

        # 추출된 이미지 크기 확인
        print(f"추출된 번호판 이미지 크기: {plate_img.shape}")

        if plate_img.size == 0:
            print("번호판 이미지가 제대로 추출되지 않았습니다.")
            continue

        # 번호판 이미지 전처리
        processed_plate = preprocess_plate(plate_img)

        # 전처리된 번호판 이미지 Colab에서 표시
        cv2_imshow(processed_plate)

        # Tesseract를 사용하여 번호판 글자 추출 (한글 언어 설정)
        extracted_text = pytesseract.image_to_string(processed_plate, lang='kor')

        # 추출된 글자 출력
        if extracted_text.strip():  # 텍스트가 비어있지 않은 경우
            print(f"추출된 번호판 글자: {extracted_text.strip()}")
            return extracted_text.strip()  # 추출된 텍스트 반환

    return None  # 번호판이 감지되지 않거나 텍스트가 추출되지 않은 경우

# 이미지로 테스트 및 변수에 저장
extracted_license_plate_text = detect_and_extract_license_plate_text(image_path)

# 변수에 저장된 텍스트 출력
if extracted_license_plate_text:
    print(f"저장된 번호판 텍스트: {extracted_license_plate_text}")
else:
    print("번호판 텍스트를 추출할 수 없습니다.")

# 번호판 텍스트 포맷팅 함수
def format_license_plate_text(extracted_text):
    # 공백 제거 및 텍스트 분리
    cleaned_text = extracted_text.replace(' ', '').strip()

    # 정규 표현식을 사용하여 패턴에 맞는 텍스트 추출
    import re
    # '숫자2글자 + 한글1글자 + 숫자4글자' 패턴 (7character)
    pattern_7char = r'(\d{2})([가-힣])(\d{4})'
    # '숫자3글자 + 한글1글자 + 숫자4글자' 패턴 (8character)
    pattern_8char = r'(\d{3})([가-힣])(\d{4})'

    # 정규 표현식으로 모든 매칭 찾기
    matches_7char = re.findall(pattern_7char, cleaned_text)
    matches_8char = re.findall(pattern_8char, cleaned_text)

    # 매칭된 텍스트가 있을 경우 포맷팅
    if matches_8char:  # 8character 패턴이 우선
        # 첫 번째 매칭된 결과를 사용
        return f"{matches_8char[0][0]}{matches_8char[0][1]}{matches_8char[0][2]}"
    elif matches_7char:  # 7character 패턴
        # 첫 번째 매칭된 결과를 사용
        return f"{matches_7char[0][0]}{matches_7char[0][1]}{matches_7char[0][2]}"

    return None  # 패턴이 맞지 않으면 None 반환

# 번호판 텍스트 추출 테스트
extracted_license_plate_text = detect_and_extract_license_plate_text(image_path)

# 클래스 결과에 따른 텍스트 포맷팅
if detected_classes == [0]:  # 7character
    formatted_text = format_license_plate_text(extracted_license_plate_text)
    if formatted_text:
        print(f"포맷된 번호판 텍스트 (7character): {formatted_text}")
    else:
        print("번호판 텍스트 포맷이 맞지 않습니다.")
elif detected_classes == [1] or detected_classes == [2]:  # 8character
    formatted_text = format_license_plate_text(extracted_license_plate_text)
    if formatted_text:
        print(f"포맷된 번호판 텍스트 (8character): {formatted_text}")
    else:
        print("번호판 텍스트 포맷이 맞지 않습니다.")



# 12. 장애인 차량 번호 저장
DB = "12루0270"  # 임시 저장된 장애인 차량 번호

# 번호판 텍스트 비교 및 주차 가능 여부 확인
if formatted_text == DB:
  print("주차 가능")
else:
  print("불법 주차")

